// 이번에는 입력 양식 form에 관한 내용을 많이 사용하고
// 조건문,반복문 함수 등을 다양하게 활용할것이다.

// 이벤트를 연결하는 방법 : 이벤트 모델

// 표준 이벤트 모델
document.body.addEventListener("keyup", () => {});

// 고전 이벤트 모델 : on00 으로 시작하는 속성에 함수를 할당해서 이벤트를 연결하는 방법을 말한다.
document.body.onkeyup = (event) => {};

// 인라인 이벤트 모델 : on00으로 시작하는 속성을 HTML요소에 직접넣어서 이벤트를 연결하는 것
const listener = (event) => {};
<body onkeyup="listener(event)"></body>;

// 모든 이벤트 모델의 이벤트 리스너는 첫번째 매개변수로 이벤트 객체를 받는다.
// 이벤트 객체에는 이벤트와 관련된 정보들이 들어있다.
// 웹브라우저는 많은이벤트를 가지고 있으므로 모든 이벤트속성을 공부하는것은 추천하지 않는다.

// 키보드 이벤트
/*
keydown: 키가 눌릴 때 실행, 키보드를 꾹 누르고 있을때도, 입력될때도 실행
keypress: 키가 입력되었을 때 실행, 하지만 웹브라우저에 따라 아시아권의 문자를 제대로 처리하지 못하는 문제가 있다.
keyup: 키보드에서 키가 떨어질 때 실행

keydown과 keypress는 아시아권의 문자를 제대로 처리하지 못하는 문제가 있어서 일반적으로는 keyup이벤트를 사용한다.
*/

// html파일로 >>

// keypress이벤트로 구현하면 아시아권의 문자는 공백이 들어가기전까지는 글자수를 세지 않는다.
// 아예 keypress이벤트가 발생하지 않는다.

// 사실 keyup 이벤트도 문제가 있다. 키가 키보드에서 떨어질 때 발생하므로 특정 키를 꾹 누르고 있으면 글자수를 세지 않습니다.

// 키보드 키 코드 사용하기
// 키보드 이벤트가 발생할 때는 이벤트 객체로 어떤키를 눌렀는지와 관련된 속성들이 따라옵니다.
// 여러 속성들이 있지만, 여기서는 다음과같은 속성만 살펴보겠습니다.

// code : 입력한키
// keyCode : 입력한 키를 나타내는 숫자
// altKey : alt키를 눌렀는지
// ctrlKey : ctrl키를 눌렀는지
// shiftKey : shift키를 눌렀는지
// html파일로 >>

// 코드에서 event.code가 있는 경우를 확인하는 코드를 사용했는데, 이는 인터넷 익스플로러와 구버전의 엣지 브라우저를 지원하기 위해서입니다.
// 그런데 인터넷익스플로러와 구버전의 엣지 웹브라우저는 code속성을 지원하지 않습니다.
// 이런 웹브라우저까지 지원하려면 keyCode 속성을 활용해서 프로그램을 구현해야 한다.

// 키로 별 움직이기
// html파일로 >>

// 이벤트 발생 객체

// 코드의 규모가 커지면 이벤트리스너를 외부로 분리하는 경우가 많아진다.
// 이런 경우에 이벤트를 발생시킨 객체에 어떻게 접근할 수 있을까
// 1. event.currentTarget 속성을 사용한다.
// () => {} 와 function (){}

// 2. this 키워드 사용합니다
// 화살표 함수가 아닌 function(){} 형태로 함수를 선언한 경우에 사용한다.

// 화살표 함수가 등장한 이후로는 2가지 방법 모두 많이 사용한다.

// event.currentTarget을 사용하는 경우
// html 이동 >>>>>>>>>
