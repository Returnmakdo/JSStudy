Promise?
자바스크립트 비동기 처리에 사용되는 객체이다.

왜 필요한가?
프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다. 일반적으로 웹 어플리케이션을 구현할 때 서버에서
데이터를 요청하고 받아오기 위해 아래와 같은 API를 사용한다.

$.get('url 주소/products/1', function(response) {
  // ...
});

그런데 데이터를 받아오기도 전에 화면에 데이터를 표시하려고 하면 오류가 발생하거나 빈 화면이 뜬다.
이와 같은 문제점을 해결하기 위한 방법중 하나가 프로미스이다.

ajax 통신코드예제
function getData(callbackFunc) {
  $.get('url 주소/products/1', function(response) {
    callbackFunc(response); // 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌
  });
}

getData(function(tableData) {
  console.log(tableData); // $.get()의 response 값이 tableData에 전달됨
});


프로미스적용
function getData(callback) {
  // new Promise() 추가
  return new Promise(function(resolve, reject) {
    $.get('url 주소/products/1', function(response) {
      // 데이터를 받으면 resolve() 호출
      resolve(response);
    });
  });
}

// getData()의 실행이 끝나면 호출되는 then()
getData().then(function(tableData) {
  // resolve()의 결과 값이 여기로 전달됨
  console.log(tableData); // $.get()의 reponse 값이 tableData에 전달됨
});

프로미스의 3가지 상태(처리과정)

 - Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
 - Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과값을 반환해준 상태
 - Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태

Pending(대기)
new Promise(); 이렇게 호출하면 대기상태가 된다.
메소드를 호출할 때 콜백함수를 선언할 수 있고 콜백함수의 인자는 resolve, reject이다.
new Promise(function(resolve, reject) {
  // ...
});

Fullfilled(이행)
new Promise(function(resolve, reject) {
  resolve();
});

위와같이 resolve를 실행하면 이행상태가 된다.

이행상태가 되면 then()을 이용하여 처리결과값을 받을 수 있다.
function getData() {
  return new Promise(function(resolve, reject) {
    var data = 100;
    resolve(data);
  });
}

// resolve()의 결과 값 data를 resolvedData로 받음
getData().then(function(resolvedData) {
  console.log(resolvedData); // 100
});

Rejected(실패)
new Promise(function(resolve, reject) {
  reject();
});

실패상태가 되면 실패한 이유를 catch()로 받을 수 있다.
function getData() {
  return new Promise(function(resolve, reject) {
    reject(new Error("Request is failed"));
  });
}

// reject()의 결과 값 Error를 err에 받음
getData().then().catch(function(err) {
  console.log(err); // Error: Request is failed
});
