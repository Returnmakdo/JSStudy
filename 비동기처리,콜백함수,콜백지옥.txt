비동기 처리?
특정 코드의 연산이 끝날 때 까지 코드의 실행을 멈추지 않고 다음 코드를 먼저 실행하는 자바스크립트의 특성을 의미한다.

비동기 처리 사례1

setTimeout() - 코드를 바로실행하지 않고 지정한 시간만큼 기다렸다가 로직을 실행

// #1
console.log('Hello');
// #2
setTimeout(function() {
	console.log('Bye');
}, 3000);
// #3
console.log('Hello Again');


결과값으로는 1, 3, 2순서로 찍힌다. 왜그럴까?

바로 비동기방식으로 실행되기 때문에 setTimeout()을 실행하고 나서 3초를 기다리지않고 바로 다음코드인 3번코드를 실행하기 때문에
이런 현상이 나타납니다.

사례2
ajax get요청
function getData() {
	var tableData;
	$.get('https://domain.com/products/1', function(response) {
		tableData = response;
	});
	return tableData;
}
console.log(getData()); // undefined

getData()에 undefined가 찍히는 이유는 get요청으로 서버에서 데이터를 받아오는 시간을 기다려주지 않고, getData()를 실행해버렸기 때문에
undefined가 찍히는 것입니다.


콜백함수로 비동기처리방식의 문제점 해결하기

ajax get요청 해결하기
function getData(callbackFunc) {
	$.get('https://domain.com/products/1', function(response) {
		callbackFunc(response); // 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌
	});
}

getData(function(tableData) {
	console.log(tableData); // $.get()의 response 값이 tableData에 전달됨
});

이렇게 콜백함수를 사용하게되면 특정로직이 끝났을 떄 원하는 동작을 실행시킬 수 있다.

콜백지옥
 - 비동기처리 로직을 위해 콜백함수를 연속해서 사용했을 때 발생하는 문제이다.

$.get('url', function(response) {
	parseValue(response, function(id) {
		auth(id, function(result) {
			display(result, function(text) {
				console.log(text);
			});
		});
	});
});

예를들어 get요청을 받아오는 부분을 모두 비동기로 처리해야한다고 하면 위와같이 콜백안에 콜백을 계속 무는형식으로 코딩을하게되는데,
이러한 코드구조는 가독성도 떨어지고, 로직을 변경하기도 어렵다. 이런 코드구조를 콜백지옥이라고 한다.

콜백지옥 해결법
Promist / Async

function parseValueDone(id) {
	auth(id, authDone);
}
function authDone(result) {
	display(result, displayDone);
}
function displayDone(text) {
	console.log(text);
}
$.get('url', function(response) {
	parseValue(response, parseValueDone);
});

중첩해서 선언했던 콜백익명함수를 각각의 함수로 구분했다.

 ajax 통신으로 받은 데이터를 parseValue() 메서드로 파싱 합니다. parseValueDone()에 파싱 한 결과값인 id가 전달되고 auth() 메서드가 실행됩니다.
 auth() 메서드로 인증을 거치고 나면 콜백 함수 authDone()이 실행됩니다. 인증 결과 값인 result로 display()를 호출하면
 마지막으로 displayDone() 메서드가 수행되면서 text가 콘솔에 출력됩니다.

